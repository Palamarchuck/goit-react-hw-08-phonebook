{"version":3,"file":"static/js/419.ed10c738.chunk.js","mappings":"qNACA,EAA8B,iCAA9B,EAA8E,kCAA9E,EAA+H,kCAA/H,EAA8K,gC,SCM/J,SAASA,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SAElC,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAkBI,OACI,kBAAML,SARO,SAAAM,GACjBA,EAAEC,iBACFP,EAAS,CAAEE,KAAAA,EAAME,OAAAA,IACjBD,EAAQ,IACRE,EAAU,KAIwBG,UAAWC,EAAzC,WACI,mBAAOD,UAAWC,EAAlB,kBAEI,kBACIC,KAAK,OACLR,KAAK,OACLS,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,MAAOZ,EACPa,SA3BK,SAAAT,GACrBH,EAAQG,EAAEU,cAAcF,QA2BRN,UAAWC,QAInB,mBAAOD,UAAWC,EAAlB,oBACI,kBACIC,KAAK,MACLR,KAAK,SACLS,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,MAAOV,EACPW,SApCO,SAAAT,GACvBD,EAAUC,EAAEU,cAAcF,QAoCVN,UAAWC,QAInB,mBAAQC,KAAK,SAASF,UAAWC,EAAjC,4BCxDhB,MAA8B,iCAA9B,EAA6E,iCAA7E,EAA4H,iCAA5H,EAA0K,gCC4B1K,EAvBoB,SAAC,GAAD,IAAGQ,EAAH,EAAGA,SAAUC,EAAb,EAAaA,cAAb,OAClB,eAAIV,UAAWC,EAAf,SACGQ,EAASE,KAAI,gBAAGjB,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQgB,EAAjB,EAAiBA,GAAjB,OACV,gBAAeZ,UAAWC,EAA1B,WACI,eAAGD,UAAWC,EAAd,UACCP,EADD,KACSE,MAET,mBAAQiB,QAAS,kBAAIH,EAAcE,IAAKZ,UAAWC,EAAnD,sBAJOW,SCRnB,EAA8B,4BAA9B,EAAwE,4BCcxE,EAXe,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACb,mBAAOP,UAAWC,EAAlB,mCAEE,kBAAOC,KAAK,OAAOR,KAAK,SAASY,MAAOA,EAAOC,SAAUA,EAAUP,UAAWC,Q,mBCLrEa,EAAoB,SAAC,GAA0B,IAAxBL,EAAuB,EAAvBA,SAAUM,EAAa,EAAbA,OAC1C,IAAKA,EACD,OAAON,EAASO,MAGpB,IAAMC,EAAmBF,EAAOG,cAMhC,OALeT,EAASO,MAAMD,QAAO,YAAuB,IAApBrB,EAAmB,EAAnBA,KAAME,EAAa,EAAbA,OAG1C,OAFuBF,EAAKwB,cAELC,SAASF,IAAqBrB,EAAOuB,SAASF,OCDhEG,EAAY,SAAC,GAAD,SAAGL,QCKb,SAASM,IACpB,IAAMZ,GAAWa,EAAAA,EAAAA,IAAYR,GACvBC,GAASO,EAAAA,EAAAA,IAAYF,GACrBG,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACNF,GAASG,EAAAA,EAAAA,SACX,CAACH,IAqBC,OACI,4BACI,uCAEA,SAAChC,EAAD,CAAaC,SArBJ,SAACmC,GAMlBJ,GAASK,EAAAA,EAAAA,IAAWD,QAgBZ,sCAGA,SAAC,EAAD,CAAQrB,MAAOS,EAAQR,SAZf,SAAC,GAAc,IAAbsB,EAAY,EAAZA,OAClBN,GAAUO,EAAAA,EAAAA,GAAUD,EAAOvB,YAYnB,SAAC,EAAD,CAAaG,SAAUA,EAAUC,cAjBrB,SAACE,GACrBW,GAASb,EAAAA,EAAAA,IAAcE","sources":["webpack://react-homework-template/./src/components/Phonebook/Contactform/Contactform.module.css?ae91","components/Phonebook/Contactform/Contactform.jsx","webpack://react-homework-template/./src/components/Phonebook/Contactlist/Contactlist.module.css?1a70","components/Phonebook/Contactlist/Contactlist.jsx","webpack://react-homework-template/./src/components/Phonebook/Filter/Filter.module.css?44e1","components/Phonebook/Filter/Filter.jsx","redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","components/Phonebook/Phonebook.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"Contactform_contactForm__+84NK\",\"contactLabel\":\"Contactform_contactLabel__Zg1F2\",\"contactInput\":\"Contactform_contactInput__zhg2c\",\"contactBtn\":\"Contactform_contactBtn__b8Bf+\"};","import { useState } from 'react';\nimport styles from './Contactform.module.css';\n\n\n\n\n\nexport default function ContactForm({ onSubmit }) {\n       \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n   \n    const handleNameChange = e => {\n        setName(e.currentTarget.value);\n    };\n\n    const handleNumberChange = e => {\n        setNumber(e.currentTarget.value);\n    };\n\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit({ name, number });\n        setName('');\n        setNumber('');\n    };\n\n        return (\n            <form onSubmit={handleSubmit} className={styles.contactForm}>\n                <label className={styles.contactLabel}>\n                    Name\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        value={name}\n                        onChange={handleNameChange}\n                        className={styles.contactInput}\n                            \n                    />\n                </label>\n                <label className={styles.contactLabel}>Number\n                    <input\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        value={number}\n                        onChange={handleNumberChange}\n                        className={styles.contactInput}\n                    />\n\n                </label>\n                <button type=\"submit\" className={styles.contactBtn}>Add contact</button>\n\n            </form>\n\n        )\n    \n    }\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"Contactlist_contactList__WoPLo\",\"contactItem\":\"Contactlist_contactItem__OBc-c\",\"contactText\":\"Contactlist_contactText__ixnx-\",\"contactBtn\":\"Contactlist_contactBtn__3pi2C\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Contactlist.module.css';\n\n\n\nconst ContactList = ({ contacts, removeContact }) => (\n  <ul className={styles.contactList}>\n    {contacts.map(({ name, number, id }) => (\n        <li key = {id} className={styles.contactItem}>\n            <p className={styles.contactText}>\n            {name}: {number}\n            </p>\n            <button onClick={()=>removeContact(id)} className={styles.contactBtn}>Delete</button>\n        </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.string,\n      id: PropTypes.string,      \n    })\n    ),\n};\n\nexport default ContactList;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__z2DVo\",\"filterInput\":\"Filter_filterInput__Yno-Q\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.filterLabel}>\n    Find contacts by name\n    <input type=\"text\" name=\"filter\" value={value} onChange={onChange} className={styles.filterInput}/>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n\nexport default Filter;","export const getContacts = ({contacts}) => contacts.items;\n\nexport const getFilterContacts = ({ contacts, filter }) => {\n    if (!filter) {\n        return contacts.items;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.items.filter(({ name, number }) => {\n        const normalizedName = name.toLowerCase();\n\n        return (normalizedName.includes(normalizedFilter) || number.includes(normalizedFilter))\n    });\n    return result;\n}","\nexport const getFilterContacts = ({ items, filter }) => {\n    const normalizedFilter = filter.toLowerCase();\n    const result = items.filter(({ name, number }) => {\n        const normalizedName = name.toLowerCase();\n\n        return (normalizedName.includes(normalizedFilter) || number.includes(normalizedFilter))\n    });\n    return result;\n}\nexport const getFilter = ({ filter }) => filter;\n","\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ContactForm from \"./Contactform/Contactform\";\nimport ContactList from \"./Contactlist/Contactlist\";\nimport Filter from './Filter/Filter';\n\nimport { fetchContacts, addContact, removeContact, } from 'redux/contacts/contacts-operations';\nimport { setFilter } from 'redux/filter/filter-actions';\nimport { getFilterContacts } from 'redux/contacts/contacts-selectors';\nimport { getFilter } from 'redux/filter/filter-selectors';\n\n\n\nexport default function Phonebook() {\n    const contacts = useSelector(getFilterContacts);\n    const filter = useSelector(getFilter)\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    },[dispatch])\n\n    \n\n    const onAddContact = (payload) => {\n        // const isContact = contacts.find(item => item.name.toLowerCase() === payload.name.toLowerCase());\n        // if (isContact) {\n        //     alert(`${payload.name} is already in contact`);\n        //     return\n        // };\n        dispatch(addContact(payload));\n    }\n\n    const onRemoveContact = (id) => {\n        dispatch(removeContact(id));\n    }\n\n    const onSetFilter = ({target}) => {\n        dispatch (setFilter(target.value))\n    }\n    \n        return (\n            <div>\n                <h1>Phonebook</h1>\n                {/* <ContactForm onSubmit={addNewContact} />  */}\n                <ContactForm onSubmit={onAddContact}/> \n                <h2>Contacts</h2>\n                {/* <Filter value={filter} onChange={changeFilter} />\n                <ContactList contacts={visibleContacts()} onDeleteContact={deleteContact} /> */}\n                <Filter value={filter} onChange={onSetFilter} />\n                <ContactList contacts={contacts} removeContact={onRemoveContact} />\n                \n            </div>\n        )\n    \n}\n\n    // const [contacts, setContacts] = useLocalStorage('contacts', []);\n    // const [filter, setFilter] = useState('');\n    \n    // const addNewContact = ({ name, number }) => {\n    // const isContact = contacts.find(contact => contact.name === name);\n    //     if (isContact) {\n    //         alert(`${name} is already in contact`);\n    //         setContacts(contacts);\n    //     } else {\n    //         setContacts([\n    //             {\n    //                 id: nanoid(),\n    //                 name,\n    //                 number,\n    //             }, ...contacts,]) \n    //      };\n    // };\n\n    // const deleteContact = (contactId) => {\n    //     setContacts(contacts => (\n    //         contacts.filter(contact => contact.id !== contactId)\n    //     ))\n    // }; \n\n    // const changeFilter = (e) => {\n    //     setFilter(e.currentTarget.value);\n    // };\n\n    // const visibleContacts = () => {\n    //     const normalizedFilter = filter.toLowerCase();\n    //     return contacts.filter(contact =>\n    //     contact.name.toLowerCase().includes(normalizedFilter))\n    // }\n\n    // useEffect(() => {\n    //     const contacts = localStorage.getItem('contacts');\n    //     const parsedContacts = JSON.parse(contacts);\n\n    //     if (parsedContacts) {\n    //         setContacts(parsedContacts)}\n    // }, [setContacts])\n    \n    // useEffect(() => {\n    //     window.localStorage.setItem('contacts', JSON.stringify(contacts))\n    // }, [contacts])"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","e","preventDefault","className","styles","type","pattern","title","required","value","onChange","currentTarget","contacts","removeContact","map","id","onClick","getFilterContacts","filter","items","normalizedFilter","toLowerCase","includes","getFilter","Phonebook","useSelector","dispatch","useDispatch","useEffect","fetchContacts","payload","addContact","target","setFilter"],"sourceRoot":""}